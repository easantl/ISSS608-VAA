[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny.\n\n\n\n\nFor the purpose of this hands-on exercise, the following R packages will be used.\n\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse,RODBC, dplyr)\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.\n\n\n\n\n\n\nFor the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\ncoffeechain &lt;- read_rds(\"data/CoffeeChain.rds\")\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\nsales_data = left_join(sales, spark)\n\n\n\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\nlibrary(dataui)\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the following R packages will be used.\n\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse,RODBC, dplyr)\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\ncoffeechain &lt;- read_rds(\"data/CoffeeChain.rds\")\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "sales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "In this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "Before we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\nsales_data = left_join(sales, spark)\n\n\n\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "In this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\nlibrary(dataui)\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Takehome_Ex03: Storyboard",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#introduction",
    "title": "Takehome_Ex03: Storyboard",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#motivation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#motivation",
    "title": "Takehome_Ex03: Storyboard",
    "section": "Motivation",
    "text": "Motivation\nOceanus Folk began as a niche genre tied to the cultural identity of the small island nation of Oceanus. Its unexpected global emergence—catalyzed by Sailor Shift’s meteoric career—offers a rare opportunity to examine the interplay between individual stardom, genre influence, and collaborative networks in music. Understanding how a genre spreads and evolves offers insight not only into musical trends but also into networked cultural transmission."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#methodology",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#methodology",
    "title": "Takehome_Ex03: Storyboard",
    "section": "Methodology",
    "text": "Methodology\nTo understand the evolution and influence of Oceanus Folk, particularly through the career of Sailor Shift, our team adopted a modular, data-driven approach. The methodology consists of four key components:\n\nNetwork Construction: We parsed a JSON-based music knowledge graph into a tidygraph structure, identifying key node types (artists, songs, albums) and edge relationships (e.g., collaboration, influence). This provided the foundational structure for our visual analytics.\nCareer Profiling: We traced Sailor Shift’s career over time using timeline and slopegraph visualizations to reveal genre transitions and key milestones. This helped surface patterns in her collaborations and viral growth.\nInfluence Analysis: We extracted subgraphs to study how Sailor influenced and was influenced by others. By filtering specific edge types (e.g., coverof, interpolatesfrom), we mapped both direct and indirect genre diffusion and constructed genre-level Sankey diagrams and network timelines.\nRising Star Detection: Using centrality, clustering, and influence scores, we developed a model to highlight rising artists. We compared their early trajectories with Sailor’s to predict future Oceanus Folk influencers."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#storyboard",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#storyboard",
    "title": "Takehome_Ex03: Storyboard",
    "section": "Storyboard",
    "text": "Storyboard\nOur storyboard is structured into multiple interactive modules. Each module is specifically designed to address a key question that users may have about the Oceanus Folk music community, enabling them to explore Sailor Shift’s influence and the genre’s evolution from various perspectives. These proposed modules together will create a comprehensive, user-driven exploration platform, enabling a deep dive into the artistic and cultural dynamics of the Oceanus Folk genre.\nSection 1\n\n\n\n\n\nThe purpose of this module is to explore the individuals who have influenced Sailor Shift throughout her career. The visualization places Sailor at the center, with various edge types connecting her to other artists who may have had an impact on her work. When the user drags Sailor’s node, the connected nodes move along with it. Visually, the extent to which other nodes follow Sailor’s movement may offer an intuitive sense of the strength of their influence on her.\nSection 2\n\n\n\n\n\nThe purpose of this module is to examine the individuals and groups that Sailor Shift has influenced through collaboration. The visualization centers on Sailor’s network of creative partnerships, showing how her musical contributions have potentially shaped the work of other artists, albums, groups, and record labels.\nBy selecting the “Collaboration” view, users can explore Sailor’s direct and indirect collaborators across multiple layers of connection, adjustable by depth. In this example, the depth is set to 2, allowing users to see not only Sailor’s immediate collaborators but also their subsequent partnerships—offering insight into the ripple effects of her influence.\nSection 3\n\n\n\n\n\nThe purpose of this module is to explore how Sailor Shift’s influence has extended beyond her immediate circle and into the broader Oceanus Folk community. By selecting the “Community” view, users can examine how artists who have collaborated with Sailor went on to influence or work with others, creating a ripple effect across the network.\nIn this visualization, Sailor is connected to a cluster of albums and songs through performance edges, indicating her direct involvement. These works, in turn, link to other artists and musical projects—revealing layers of indirect influence. The network is depth-adjustable, and here set to 2, allowing users to trace not only Sailor’s collaborations but also the extended web of creative activity that stems from them.\nSection 4\n\n\n\n\n\nSelect Year: Users can select the year using the slider on the left, so the slope chart at the right side will highlight Oceanus Folk’s ranking in the specific year. On hover, it reveals rank, album/song counts, and growth rate.\nSection 5\n\n\n\n\n\nSelect Top n Influence Genres: This control allows users to define how many top genres to display, ranked by their level of influence on Oceanus Folk.\nSelect Influence Type: Users can customize what constitutes “influence,” including collaborations, direct references, covers, and more. Select Year Range: Adjusts the analysis period, letting users explore how genre influence patterns shift over time.\nSection 6\n\n\n\n\n\nSelect Year Range: Defines the temporal scope for tracing influence relationships involving Oceanus Folk.\nSelect Influence Type: Lets users refine the nature of influence to explore, such as cover versions, lyrical references, or collaboration.\nSelect Genre: By default, the chart displays both genres influencing Oceanus Folk and those influenced by it. Users can filter to focus on specific interaction directions or highlight the most impacted genres.\nSection 7\n\n\n\n\n\nThis module allows users to visually explore selected Top 3 Rising Stars’ contribution, specifically through roles such as Composer, Lyricist, and Producer. The graph highlights relationships between artists and their creative outputs (songs and albums).\nSection 8\n\n\n\n\n\nThis module is designed to explore how an individual artist’s work influences and is influenced by others, through musical relationships such as sampling, covering, lyrical referencing, etc.\nIt’s built around one artist at a time and visualizes the network of musical references tied to the works they have performed.\nSection 9\n\n\n\n\n\nThis module aims to showcase the song catalog of the next top 3 rising stars, highlighting the number and variety of songs they’ve performed.\nIt visualizes direct artist-to-song relationships, not broader influence. It’s ideal for understanding what each artist has worked on, not how that work connects to others."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-start",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-start",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#introduction",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "1. Introduction",
    "text": "1. Introduction\nSailor Shift is one of the most influential figures in the development of “Oceans Folk” music. From her humble beginnings as a singer on Oceanus Island to her current status as a global superstar, she has grown to represent not only her own personal success, but has also propelled this niche genre into the world. This project uses data analysis and visualization to delve deeper into her network of collaborations, musical influences, and her importance in the overall music ecosystem. We will reveal how she has influenced others and been shaped by the zeitgeist, and further reflect on what her rise reveals about the new generation of musicians."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-processing",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "2. Data processing",
    "text": "2. Data processing\n\n2.1. Extracting Edges and Nodes\n\nnodes_tbl &lt;- as_tibble(t_data$nodes)\n\nedges_tbl &lt;- as_tibble(t_data$links) %&gt;%\n  rename(from = source, to = target)\n\n\n\n2.2. Tidying nodes data frame\n\nedges_tbl &lt;- edges_tbl\n\nnode_index&lt;- nodes_tbl %&gt;%\n  mutate(index = row_number(),\n         id = as.character(id))\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  mutate(from = as.character(from),\n         to = as.character(to)) %&gt;%\n  left_join(node_index %&gt;%\n              select(id,\n                     from_index = index),\n            by = c(\"from\" = \"id\")) %&gt;%\n  left_join(node_index %&gt;%\n              select(id,\n                     to_index = index),\n            by = c(\"to\" = \"id\"))\n\n\n\n2.2. Get closer to data\n\n2.2.1. Edges\n\n\nglimpse(edges_tbl)\n\nRows: 37,857\nColumns: 6\n$ `Edge Type` &lt;chr&gt; \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ from        &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"5\", \"5\", \"5\", \"5\", \"5\"…\n$ to          &lt;chr&gt; \"1841\", \"4\", \"0\", \"16180\", \"0\", \"16180\", \"0\", \"5088\", \"143…\n$ key         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ from_index  &lt;int&gt; 1, 1, 2, 2, 3, 3, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6…\n$ to_index    &lt;int&gt; 1842, 5, 1, 16181, 1, 16181, 1, 5089, 14333, 11678, 2480, …\n\n\n\nlength(unique(edges_tbl$`Edge Type`))\n\n[1] 12\n\nunique(edges_tbl$`Edge Type`)\n\n [1] \"InterpolatesFrom\"   \"RecordedBy\"         \"PerformerOf\"       \n [4] \"ComposerOf\"         \"ProducerOf\"         \"InStyleOf\"         \n [7] \"LyricalReferenceTo\" \"CoverOf\"            \"DistributedBy\"     \n[10] \"MemberOf\"           \"LyricistOf\"         \"DirectlySamples\"   \n\n\nThe edges dataset contains 37,857 records and 4 fields to represent the various relationships between entities in the network. Each edge contains the node IDs (source and target) of the starting and ending points, as well as 12 Edge Types describing the nature of the relationship, such as “PerformerOf”, ‘ComposerOf’ or “RecordedBy”. Meanwhile, the key field is used to distinguish between multiple connections between the same node pair.\n\n\n2.2.2. Nodes\n\n\nglimpse(nodes_tbl)\n\nRows: 17,412\nColumns: 10\n$ `Node Type`    &lt;chr&gt; \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           &lt;chr&gt; \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         &lt;lgl&gt; TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   &lt;chr&gt; \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          &lt;chr&gt; \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        &lt;lgl&gt; TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\nThe nodes dataset contains 17,412 entries, each representing an entity within the music network and categorized under the Node Type column as “Person”, “Song”, or “RecordLabel”. Each node includes relevant attributes based on its type—for example, songs have fields such as single, release_date, genre, and notable, while people may have stage_name and notoriety_date. The presence of missing values (NA) in many fields indicates that certain attributes are only applicable to specific node types.\n\n\n\n2.3. Deal with NA values\nThe function tbl_graph() cannot process with NA values, with the error message: At rinterface_extra.c:82 : The value nan is not representable as an integer. Invalid value”. Thus, it’s necessary for us to check and deal with those NA values to ensure they will not affect our analysis.\n\nnodes_tbl %&gt;% summarise_all(~ sum(is.na(.)))\n\n# A tibble: 1 × 10\n  `Node Type`  name single release_date genre notable    id written_date\n        &lt;int&gt; &lt;int&gt;  &lt;int&gt;        &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt;        &lt;int&gt;\n1           0     0  13797        12801 12801   12801     0        15957\n# ℹ 2 more variables: stage_name &lt;int&gt;, notoriety_date &lt;int&gt;\n\nedges_tbl %&gt;% summarise_all(~ sum(is.na(.)))\n\n# A tibble: 1 × 6\n  `Edge Type`  from    to   key from_index to_index\n        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;int&gt;    &lt;int&gt;\n1           0     0     0     0          0        0\n\nnodes_tbl %&gt;% summarise_all(~ sum(is.nan(.)))\n\n# A tibble: 1 × 10\n  `Node Type`  name single release_date genre notable    id written_date\n        &lt;int&gt; &lt;int&gt;  &lt;int&gt;        &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt;        &lt;int&gt;\n1           0     0      0            0     0       0     0            0\n# ℹ 2 more variables: stage_name &lt;int&gt;, notoriety_date &lt;int&gt;\n\nedges_tbl %&gt;% summarise_all(~ sum(is.nan(.)))\n\n# A tibble: 1 × 6\n  `Edge Type`  from    to   key from_index to_index\n        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;int&gt;    &lt;int&gt;\n1           0     0     0     0          0        0\n\n\nAs observed from the outcome above, there’s no missing value in edges, but quite a lot of NA values in nodes. However, luckily, there’s no missing ‘ID’ and ‘Name’, which will not affect the analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#sailor-shifts-career-connections",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#sailor-shifts-career-connections",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "3. Sailor Shift’s Career Connections",
    "text": "3. Sailor Shift’s Career Connections\n\n3.1. The contributors who shaped the modern Sailor Shift\nA singer’s journey to fame is never a solitary one. Sailor has been accompanied by many — fellow singers, producers, instrumentalists, composers, and others who helped shape her path.\n\nsailor_id &lt;- node_index %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(index) %&gt;%\n  as.character()\n\nedges_to_sailor &lt;- edges_tbl %&gt;%\n  filter(to_index == sailor_id)\n\ninfluencers &lt;- edges_to_sailor %&gt;%\n  left_join(node_index, by = c(\"from_index\" = \"index\"))\n\ninfluencer_summary &lt;- influencers %&gt;%\n  filter(`Node Type` == \"Person\" )\n\n\ninfluencer_summary\n\n# A tibble: 2 × 16\n  `Edge Type`     from  to      key from_index to_index `Node Type` name  single\n  &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;int&gt;    &lt;int&gt; &lt;chr&gt;       &lt;chr&gt; &lt;lgl&gt; \n1 LyricalReferen… 17126 17255     0      17127    17256 Person      Cass… NA    \n2 InterpolatesFr… 17155 17255     0      17156    17256 Person      Clai… NA    \n# ℹ 7 more variables: release_date &lt;chr&gt;, genre &lt;chr&gt;, notable &lt;lgl&gt;, id &lt;chr&gt;,\n#   written_date &lt;chr&gt;, stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\ngraph_t &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl %&gt;%\n                     select(from = from_index,\n                            to = to_index,\n                            \"Edge Type\"),\n                   directed = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggiraph, plotly, \n                DT, readxl, gifski, gapminder,\n               gganimate, webshot2) \n\n\n\n\n\nPopdata &lt;- read.csv(\"data/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#getting-start",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#getting-start",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggiraph, plotly, \n                DT, readxl, gifski, gapminder,\n               gganimate, webshot2) \n\n\n\n\n\nPopdata &lt;- read.csv(\"data/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#setting-the-sense",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#setting-the-sense",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "1. Setting the sense",
    "text": "1. Setting the sense\nSingapore’s changing demographics have become a pressing topic, especially in the context of an aging population. Understanding the composition and spatial distribution of residents is increasingly important to both policymakers and the public. This report aims to offer a clear, data-driven overview of Singapore’s demographic landscape in 2024, with a particular focus on differences across planning areas and subzones, as well as variations by age and gender. Drawing on the latest official statistics, this analysis provides insights into the trends shaping Singapore’s communities today."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#dataset",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "2. Dataset",
    "text": "2. Dataset\nThe dataset used in this report was obtained from the Singapore Department of Statistics (DOS) and provides population counts as of June 2024. It contains detailed information on Singapore residents, broken down by Planning Area, Subzone, single year of age, and sex. This high-resolution demographic data enables granular analysis of population structures and spatial distribution across the city. The dataset comprises a total of 60,424 records. For more details, please refer to the metadata below.\n\n\n\nVariables\nDefinition\n\n\n\n\nPA\nPlanning Area\n\n\nSZ\nSubzone\n\n\nAge\nSingle Year of Age\n\n\nSex\nSex\n\n\nPop\nResident Count\n\n\nTime\nTime/Period"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#data-processing",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "3. Data processing",
    "text": "3. Data processing\nTo ensure the validity and reliability of this report, it is essential to preprocess the dataset and assess its quality. This includes checking for completeness, consistency, and potential anomalies that may affect the accuracy of our analysis.\n\n3.1. Checking for missing values\n\ncolSums(is.na(Popdata))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n\n\nAs observed from output of code-chunk above, there’s no missing value in this dataset.\n\n\n3.2. Checking for duplicates\n\nPopdata[duplicated(Popdata)]\n\ndata frame with 0 columns and 60424 rows\n\n\nAs observed from output of code-chunk above, there’s no duplicates in this dataset.\n\n\n3.2. Checking for datatype\n\nstr(Popdata)\n\n'data.frame':   60424 obs. of  6 variables:\n $ PA  : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time: int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n\n\nAs observed from the output of the code-chunk above, all column data types are appropriate. One point to note is that the datatype of the variable Age is character instead of integer. This is because the dataset does not provide age-specific breakdowns beyond 90 years old; instead, individuals aged 90 and above are grouped under the label “90_and_Over”. This classification is reasonable and consistent with common demographic reporting practices.\n\n\n3.3. Removing unnecessary columns\nSince the dataset has already been clearly defined as representing statistics from the year 2024, and upon inspection the variable Time contains only a single unique value (2024), this column is no longer necessary and can be safely removed.\n\nunique(Popdata$Time)\n\n[1] 2024\n\n\n\npopdata &lt;- subset(Popdata, select = -Time)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#key-findings",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_1/Take-home_Ex01.html#key-findings",
    "title": "Demographic structures and distribution of Singapore in 2024",
    "section": "4. Key Findings",
    "text": "4. Key Findings\n\n4.1. Interactive Population Plot\n\npa_sz_summary &lt;- popdata %&gt;%\n  group_by(PA, SZ) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Pop_thousand = Pop / 1000,\n    tooltip_text = str_replace_all(\n      paste0(\"Planning Area: \", PA,\n             \"\\nSubzone: \", SZ,\n             \"\\nPopulation: \", Pop),\n      \"'\", \"\"))\n\npa_order &lt;- pa_sz_summary %&gt;%\n  group_by(PA) %&gt;%\n  summarise(TotalPop = sum(Pop_thousand)) %&gt;%\n  filter(TotalPop &gt; 0) %&gt;%                         \n  arrange(desc(TotalPop)) %&gt;%\n  pull(PA)\n\npa_sz_summary &lt;- pa_sz_summary %&gt;%\n  filter(PA %in% pa_order) %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\ncolor_palette &lt;- c(\"#E76F51\", \"#457B9D\", \"#F4A261\", \"#2A9D8F\")\nn_subzones &lt;- length(unique(pa_sz_summary$SZ))\ncolor_values &lt;- rep(color_palette, length.out = n_subzones)\nsz_levels &lt;- sort(unique(pa_sz_summary$SZ))\nnames(color_values) &lt;- sz_levels\n\np &lt;- ggplot(pa_sz_summary, aes(x = PA, y = Pop_thousand, fill = SZ)) +\n  geom_bar_interactive(\n    aes(tooltip = tooltip_text, data_id = tooltip_text),\n    stat = \"identity\", show.legend = FALSE\n  ) +\n  scale_fill_manual(values = color_values) +\n  scale_y_continuous(\n  breaks = seq(0, 250, by = 50),\n  labels = function(x) paste0(x, \"K\")) +\n  labs(title = \"Population by Planning Area and Subzone (2024)\",\n    x = \"Planning Area\", y = \"Population (in thousands)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8 * 0.618,\n  options = list(\n    opts_hover(\"fill-opacity:1;stroke:black;stroke-width:0.5px;cursor:pointer;\"),\n    \n    opts_hover_inv(css = \"opacity:0.2;\"),  \n    opts_tooltip()\n  ))\n\n\n\n\n\nThis chart provides a comprehensive overview of the population distribution across Singapore’s planning areas and subzones in 2024.\nFrom the planning area angle, it shows that population is heavily concentrated in areas such as Tampines, Bedok, and Sengkang. Notably, seven planning areas—Tampines, Bedok, Sengkang, Jurong West, Woodlands, Yishun, and Hougang—have populations exceeding 200,000, indicating high residential density. In contrast, areas such as Seletar and Museum have very low or near-zero populations, suggesting they may be non-residential or under development.\nFrom the subzone angle, Tampines East is the most inhabited subzone, with 128,320 residents, compared to subzones such as Boon lay’s Shipyard which is completely uninhabited.\n\n\n4.2. Distribution of elderly population in Singapore\nIn Singapore, people aged 65 and above are defined as aging people, directly translated from mandarin, this group of people are expected to have a A happy, joyful and enjoyable retirement life. At this stage of life, they are no longer burdened by raising children or dealing with intense job competition, and instead experience an unprecedented sense of freedom and ease. However, from a societal perspective, an excessive number of seniors can inevitably impact the overall dynamism of society, leading to issues such as labour shortages and increased fiscal pressure.\n\npopdata_agegroup &lt;- popdata %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      Age &lt;= 21 ~ \"0–21 (Children & Teens)\",\n      Age &lt;= 35 ~ \"22–35 (Young Adults)\",\n      Age &lt;= 64 ~ \"36–64 (Middle-aged)\",\n      TRUE      ~ \"65+ (Aging)\")) %&gt;%\n  \n  group_by(AgeGroup) %&gt;%\n  summarise(TotalPop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Percentage = TotalPop / sum(TotalPop),\n        tooltip = paste0(\n      AgeGroup, \"\\nPopulation: \", formatC(TotalPop, format = \"d\", big.mark = \",\")),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"0–21 (Children & Teens)\", \n      \"22–35 (Young Adults)\", \n      \"36–64 (Middle-aged)\", \n      \"65+ (Aging)\")))\n\np &lt;- ggplot(popdata_agegroup, aes(x = AgeGroup, y = TotalPop)) +\n  geom_col_interactive(\n    aes(tooltip = tooltip, data_id = AgeGroup),\n    fill = \"#457B9D\") +\n  geom_text_interactive(\n    aes(\n      label = paste0(round(Percentage * 100, 1), \"%\"),\n      tooltip = tooltip,\n      data_id = AgeGroup),\n    vjust = -0.5,\n    size = 4,\n    color = \"black\") +\n  scale_y_continuous(labels = function(x) formatC(x, format = \"d\", big.mark = \",\")) +\n  labs(\n    title = \"Singapore Resident Population by Age Group\",\n    x = \"Age Group\",\n    y = \"Population\") +\n  theme_minimal()\n\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8 * 0.618,\n  options = list(\n    opts_hover(\"fill-opacity:1;stroke:black;stroke-width:0.5px;cursor:pointer;\"),\n    \n    opts_hover_inv(css = \"opacity:0.2;\"),  \n    opts_tooltip()\n  ))\n\n\n\n\n\nAs observed from the chart above, 44.7% of Singapore’s resident population will be in the middle-aged group (36-64 years old), indicating a mature or even aging demographic structure. The children and adolescents (0-21 years old) and the youth (22-35 years old) together account for only 34.3% of the population, resulting in a relatively limited labor supply in the future. The elderly population (65 years old and above) has already reached 21%, a proportion that should not be ignored.\nAccording to international standards, when the proportion of people aged 65 and above in a country or region exceeds 7%, it is considered an aging society; and when it exceeds 14%, it is an aged society. Singapore’s current 21% has clearly entered the “aging society” stage. This means that there are multiple challenges ahead in terms of labor force constraints, rising healthcare needs, and increasing pressure on public finances. The structural trends shown in the charts highlight the need for the government to take effective measures to encourage childbearing, extend the working life and improve the pension system.\n\nelderly_data &lt;- popdata %&gt;%\n  filter(Age &gt;= 65) %&gt;%\n  group_by(PA, SZ) %&gt;%\n  summarise(ElderlyPop = sum(Pop), .groups = \"drop\")\n\ntotal_elderly &lt;- sum(elderly_data$ElderlyPop)\n\nelderly_by_PA &lt;- elderly_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(TotalElderly = sum(ElderlyPop)) %&gt;%\n  arrange(desc(TotalElderly)) %&gt;%\n  slice_max(order_by = TotalElderly, n = 5) %&gt;%\n  mutate(\n    PA = factor(PA, levels = rev(PA)),\n    Percent = TotalElderly / total_elderly,\n    tooltip = paste0(\"Planning Area: \", PA,\n                     \"\\nPopulation: \", TotalElderly))\n\nP1 &lt;- ggplot(elderly_by_PA, aes(x = PA, y = TotalElderly)) +\n  geom_col_interactive(aes(tooltip = tooltip, data_id = PA), fill = \"#264653\") +\n  geom_text_interactive(\n    aes(label = paste0(round(Percent * 100, 1), \"%\"),\n        tooltip = tooltip, data_id = PA),\n    hjust = 1.02, color = \"white\", size = 4) +\n  coord_flip() +\n  labs(\n    title = \"Top 5 Planning Areas by Elderly Population\",\n    x = \"Planning Area\", y = \"Population\") +\n  theme_minimal(base_size = 12)\n\ntop_sz &lt;- elderly_data %&gt;%\n  arrange(desc(ElderlyPop)) %&gt;%\n  slice_max(order_by = ElderlyPop, n = 10) %&gt;%\n  mutate(\n    SZ = reorder(SZ, ElderlyPop),\n    Percent = ElderlyPop / total_elderly,\n    tooltip = paste0(\"Subzone: \", SZ,\n                     \"\\nPopulation: \", ElderlyPop))\n\nP2 &lt;- ggplot(top_sz, aes(x = SZ, y = ElderlyPop)) +\n  geom_col_interactive(aes(tooltip = tooltip, data_id = SZ), fill = \"#264653\") +\n  geom_text_interactive(\n    aes(label = paste0(round(Percent * 100, 1), \"%\"),\n        tooltip = tooltip, data_id = SZ),\n    hjust = 1.02, color = \"white\", size = 4) +\n  coord_flip() +\n  labs(title = \"Top 10 Subzones by Elderly Population\",\n    x = \"Subzone\", y = \"Population\") +\n  theme_minimal(base_size = 12)\n\ngirafe(\n  ggobj = P1 + P2,\n  width_svg = 10,\n  height_svg = 6,\n  options = list(\n    opts_hover(\"fill-opacity:1;stroke:black;stroke-width:0.5px;cursor:pointer;\"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip()))\n\n\n\n\n\nAs observed from charts above, planning areas such as Bedok, Tampines, and Hougang have some of the highest elderly populations in Singapore, with Bedok accounting for 8% of the national elderly population, Tampines 6.7%, and Tampines East alone reaching 3.3%. These figures indicate a high concentration of elderly residents in specific mature residential areas. In response to this trend, these regions need to accelerate the development of age-friendly communities, optimize the allocation of care resources, and strengthen neighborhood support systems to address the rapidly growing challenges of an ageing population."
  },
  {
    "objectID": "In-class_Ex/In-class_Exercise.html",
    "href": "In-class_Ex/In-class_Exercise.html",
    "title": "In-class_Exercise week5",
    "section": "",
    "text": "pacman ::p_load(tidyverse, jsonlite, SmartEDA, tydygraph, ggraph)"
  },
  {
    "objectID": "In-class_Ex/Week 5/In-class_Ex05.html",
    "href": "In-class_Ex/Week 5/In-class_Ex05.html",
    "title": "In-class_Exercise week5",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\nkg &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "In-class_Ex/Week 5/In-class_Ex05.html#initial-eda",
    "href": "In-class_Ex/Week 5/In-class_Ex05.html#initial-eda",
    "title": "In-class_Exercise week5",
    "section": "Initial EDA",
    "text": "Initial EDA\n\nggplot(data = edges_tbl, \n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\nesges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(source), is.na(target))\n\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n\n\nset.seed(1234)\n\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(edges_tbl$`Edge Type` == \"MemberOf\")\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html",
    "title": "Take-home_Ex01_Phase2",
    "section": "",
    "text": "I‘d like to provide my personal thoughts to our friend Zhang Jinghan’s work.\nLink: https://isss608-visualanalytics.netlify.app/take-home_ex/take-home_ex01/take-home_ex01\n\n\n\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggiraph, plotly, \n                DT, readxl, gifski, gapminder,\n               gganimate, scales) \n\n\n\n\n\npop_data  &lt;- read.csv(\"data/respopagesex2024.csv\")\n\nsgresidence  &lt;- read.csv(\"data/respopagesex2024.csv\")\n\n\n\n\n\nHere are the areas across all three visuals where she did very well and I should learn from:\n\nHer insights into the data were very profound, and she did a great job transforming the data to uncover more observations. For example, she derived the Youth Dependency Ratio (YDR) and the Elderly Dependency Ratio (EDR) to provide deeper insights into the issue of population aging. In comparison, my own assignment, which only compared population distributions, was not as insightful.\nShe used colors very skillfully in her visualization—not just to make her work more visually appealing, but more importantly, to highlight contrasts between different groups. For example, she used red and blue to distinguish between male and female groups, and orange and purple to differentiate between younger and older age groups. These thoughtful color choices made her entire visualization much clearer and easier to understand.\nHer choice of visualization types was highly appropriate—for instance, using bar charts to represent population distribution and a scatter quadrant map to show the distribution of YDR and EDR across subzones. Personally, I couldn’t think of a better choice of charts to convey the data more effectively.\n\n\n\n\nFollowing are my own ideas to adjust the visuals:\n\nIn her Visualization 1, the Population Pyramid, she presented a comprehensive view of the population structure of Singapore residents in 2024, broken down by gender and age group. However, from a reader’s perspective, the visualization contains too much information in a single chart, which may require extra effort to understand the relationships among population size, gender, age group, and percentage of the total population. In another word, the visual is not very straightforward. If it were up to me, I would present these pieces of information separately for greater clarity.\n\nFor the code, I’d like to simply “borrow” the approach used by our friend Luo Yuming, who streamlined the amount of information in the chart and represented the gender ratio comparison using an additional pie chart.\n\n# Standardise column names\npop_data &lt;- pop_data %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Age = Age,\n    Sex = Sex,\n    Population = Pop,\n    Year = Time\n  ) %&gt;%\n  filter(Year == 2024) %&gt;%\n  mutate(\n    Age_numeric = ifelse(Age == \"90_and_Over\", 90, as.integer(Age)),  \n    Sex = ifelse(Sex == \"Males\", \"Male\", \"Female\")\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Age_numeric = ifelse(Age == \"90_and_Over\", 90,\n  as.integer(Age))`.\nCaused by warning in `ifelse()`:\n! NAs introduced by coercion\n\nage_distribution &lt;- pop_data %&gt;%\n  filter(Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  group_by(Planning_Area, Age_numeric) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  rename(Age = Age_numeric)\n\n\nweighted_median &lt;- function(df) {\n  df &lt;- df[order(df$Age), ]\n  cum_pop &lt;- cumsum(df$Population)\n  cutoff &lt;- sum(df$Population) / 2\n  df$Age[which(cum_pop &gt;= cutoff)[1]]\n}\n\n\nmedian_age_summary &lt;- age_distribution %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Median_Age = weighted_median(cur_data_all()))\n\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `Median_Age = weighted_median(cur_data_all())`.\nℹ In group 1: `Planning_Area = \"Ang Mo Kio\"`.\nCaused by warning:\n! `cur_data_all()` was deprecated in dplyr 1.1.0.\nℹ Please use `pick()` instead.\n\ngender_summary &lt;- pop_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Percent = Population / sum(Population),\n         Label = paste0(percent(Percent, accuracy = 0.1)))  \n\n\np1 &lt;- ggplot(gender_summary, aes(x = \"\", y = Population, fill = Sex)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  geom_text(aes(label = Label), position = position_stack(vjust = 0.5),\n            size = 2.5, fontface = \"bold\", color = \"black\") + \n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(title = \"Gender Distribution\") +\n  theme_void() +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),  \n    legend.position = \"none\",\n    plot.title = element_text(size = 9, face = \"bold\", hjust = 0.5)\n  )\n\n\n\npyramid_data &lt;- pop_data %&gt;%\n  filter(Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  mutate(AgeGroup = cut(Age_numeric,\n                        breaks = c(seq(0, 90, 10), Inf),\n                        right = FALSE,\n                        labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\",\n                                   \"40-49\", \"50-59\", \"60-69\", \"70-79\",\n                                   \"80-89\", \"90+\"))) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Population = ifelse(Sex == \"Male\", -Population, Population))\n\n\n\np2 &lt;- ggplot(pyramid_data, aes(x = Population, y = AgeGroup, fill = Sex)) +\n  geom_col(width = 0.9) +\n  scale_x_continuous(labels = function(x) paste0(abs(x / 1000), \"k\")) +\n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(\n    title = \"Population Pyramid by Age Group and Gender (2024)\",\n    x = \"Population\",\n    y = \"Age Group\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    legend.position = \"none\"\n  )\n\n\ntop10_pa_names &lt;- pop_data %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Total = sum(Population), .groups = \"drop\") %&gt;%\n  arrange(desc(Total)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(Planning_Area)\n\n\ntop10_pyramid &lt;- pop_data %&gt;%\n  filter(Planning_Area %in% top10_pa_names, Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  group_by(Planning_Area, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Male\", -Population, Population),\n    Planning_Area = factor(Planning_Area, levels = rev(top10_pa_names))\n  )\n\n\n\np3 &lt;-ggplot(top10_pyramid, aes(x = Population, y = Planning_Area, fill = Sex)) +\n  geom_col(width = 0.7) +\n  scale_x_continuous(labels = function(x) paste0(abs(x / 1000), name = \"k\")) +\n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(\n    title = \"Population Pyramid of Top 10 Planning Areas (2024)\",\n    y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    axis.text = element_text(size = 10),\n    legend.position = \"bottom\"\n  )\n\n\n(p1 + p2) / p3 +\n  plot_layout(\n    widths = c(1, 2),    \n    heights = c(1, 1.2)  \n  ) +\n  plot_annotation(\n    title = \"Singapore’s 2024 Population Overview\",\n    theme = theme(\n      plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)\n    )\n  )\n\n\n\n\n\n\n\n\n\nFor visualization 2, I’d like to make a very simple adjustment which can directly hit the point, which is add a label to each zone on the chart. If required, we may also make this to an interactive chart.\n\nMy shot:\n\nsgresidence &lt;- sgresidence %&gt;%\n  mutate(age = as.integer(Age))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `age = as.integer(Age)`.\nCaused by warning:\n! NAs introduced by coercion\n\nsgresidence %&gt;%\n  filter(is.na(as.integer(Age))) %&gt;%\n  distinct(Age)\n\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `is.na(as.integer(Age))`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n          Age\n1 90_and_Over\n\nsgresidence %&gt;%\n  filter(Age == \"90_and_Over\") %&gt;%\n  summarise(total_90plus = sum(Pop)) %&gt;%\n  mutate(total_pop = sum(sgresidence$Pop),\n         percent = total_90plus / total_pop * 100)\n\n  total_90plus total_pop   percent\n1        25290   4193530 0.6030719\n\nsgresidence &lt;- sgresidence %&gt;%\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    age = as.integer(Age)\n  )\n\nsgresidence &lt;- sgresidence %&gt;%\n  filter(Pop &gt; 0)\n\n## 1 ────────── Calculate ratios\ndep_sz &lt;- sgresidence %&gt;% \n  mutate(group = case_when(\n    age &lt; 15  ~ \"Youth\",\n    age &gt;= 65 ~ \"Elderly\",\n    TRUE      ~ \"Working\")) %&gt;% \n  group_by(SZ, group) %&gt;% \n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;% \n  pivot_wider(names_from = group, values_from = Pop, values_fill = 0) %&gt;% \n  mutate(\n    YDR        = Youth / Working,\n    EDR        = Elderly / Working,\n    Dependants = Youth + Elderly,\n    grp        = if_else(YDR &gt; EDR, \"Y_dom\", \"O_dom\"),\n    log_ratio  = log(pmax(EDR, 1e-6) / pmax(YDR, 1e-6)),  # avoid log(0)\n    YDR_pct    = percent_rank(YDR) * 100,\n    EDR_pct    = percent_rank(EDR) * 100\n  )\n\n## 2 ────────── Discretize log_ratio into \"Low\" / \"Mid\" / \"High\"\ndep_plot &lt;- dep_sz %&gt;%\n  mutate(\n    imbalance = cut(abs(log_ratio),\n                    breaks = quantile(abs(log_ratio), probs = c(0, 1/3, 2/3, 1)),\n                    labels = c(\"Low\", \"Mid\", \"High\"),\n                    include.lowest = TRUE))\n\n## 3 ────────── Define stepped color table\ncol_tbl &lt;- tribble(\n  ~grp,     ~imbalance, ~col,\n  \"Y_dom\", \"Low\",  \"#FFF2B2\",\n  \"Y_dom\", \"Mid\",  \"#FFC94A\",\n  \"Y_dom\", \"High\", \"#FF9300\",\n  \"O_dom\", \"Low\",  \"#E3DFF5\",\n  \"O_dom\", \"Mid\",  \"#AF94E1\",\n  \"O_dom\", \"High\", \"#6B42BF\"\n)\n\n## 4 ────────── Merge color\ndep_plot &lt;- dep_plot %&gt;%\n  left_join(col_tbl, by = c(\"grp\", \"imbalance\"))\n\n## 5 ────────── Plot\nggplot(dep_plot, aes(YDR_pct, EDR_pct)) +\n  geom_hline(yintercept = 50, color = \"gray60\") +\n  geom_vline(xintercept = 50, color = \"gray60\") +\n  geom_point(aes(size = Dependants, color = col), alpha = 0.9) +\n  scale_colour_identity() +\n  scale_size_area(max_size = 12,\n                  breaks = c(500, 2000, 5000, 10000),\n                  labels = scales::comma,\n                  name = \"Dependants\\n(headcount)\") +\n  labs(\n    title = \"Youth vs Elderly Dependency Ratio of SG Sub Zones Quadrants (2024)\",\n    subtitle = \"• Hue: Dominant dependency (Purple–Elderly, Yellow–Youth) \\n• Depth: Imbalance level (Low / Mid / High) \\n• Size: Total dependants count\",\n    x = \"Youth Dependency Percentile (YDP)\",\n    y = \"Elderly Dependency Percentile (EDP)\"\n  ) +\n \n  annotate(\"text\", x = 80, y = 90, label = \"Dual-Burden Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 80, y = 10, label = \"Young Family Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 20, y = 90, label = \"Aging-Dominant Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 20, y = 10, label = \"Working Core Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\n\n\n\n\nFor Visualization 3, I noticed that a): Median lines for both the EDR and YDR are presented, they are not labeled, which may cause confusion. I would recommend adding clear labels to these reference lines. b): It would be helpful to highlight planning areas where EDR exceed the median values, as these zones may warrant closer attention. c): It’s good to show the median EDR and YDR in value so that readers can understand the situation more clearly.\n\nMy shot:\n\n# 1. Categorize by Age Group and summarize population\ndf_agegroup &lt;- sgresidence %&gt;%\n  mutate(AgeGroup = case_when(\n    Age &lt; 15 ~ \"Youth\",\n    Age &lt;= 64 ~ \"WorkingAge\",\n    TRUE ~ \"Elderly\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(\n    TotalPop = Youth + WorkingAge + Elderly,\n    ElderlyRatio = Elderly / WorkingAge,\n    YouthRatio = Youth / WorkingAge\n  )\n\n# 2. Reshape to long format for stacked bar chart\ndf_age_long &lt;- df_agegroup %&gt;%\n  pivot_longer(cols = c(\"Youth\", \"WorkingAge\", \"Elderly\"),\n               names_to = \"AgeGroup\", values_to = \"Pop\") %&gt;%\n  mutate(PA = fct_reorder(PA, -Pop, .fun = sum))\n\n# 3. Compute median values and max population\nmedian_edr &lt;- median(df_agegroup$ElderlyRatio, na.rm = TRUE)\nmedian_ydr &lt;- median(df_agegroup$YouthRatio, na.rm = TRUE)\nmax_pop    &lt;- max(df_agegroup$TotalPop, na.rm = TRUE)\n\n# 4. Add star marker to EDR above median\ndf_agegroup &lt;- df_agegroup %&gt;%\n  mutate(EDR_star = if_else(ElderlyRatio &gt; median_edr, \"*\", \"\"))\n\n# 5. Define color palette\ncustom_colors &lt;- c(\n  \"Youth\" = \"#FFD700\",        # Gold\n  \"WorkingAge\" = \"#B0B0B0\",   # Gray\n  \"Elderly\" = \"#800080\"       # Purple\n)\n\n# 6. Get rightmost x position\nlast_x &lt;- length(unique(df_age_long$PA))\n\n# 7. Create the plot\nggplot(df_age_long, aes(x = PA, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", width = 0.95) +\n\n  # Elderly Dependency Ratio line\n  geom_line(\n    data = df_agegroup,\n    aes(x = PA, y = ElderlyRatio * max_pop / 2, group = 1),\n    inherit.aes = FALSE, color = \"#9932CC\", size = 1.2\n  ) +\n\n  # Youth Dependency Ratio line\n  geom_line(\n    data = df_agegroup,\n    aes(x = PA, y = YouthRatio * max_pop / 2, group = 1),\n    inherit.aes = FALSE, color = \"#E67E22\", size = 1.2\n  ) +\n\n  # Red stars for high EDR\n  geom_text(\n    data = df_agegroup %&gt;% filter(EDR_star == \"*\"),\n    aes(x = PA, y = ElderlyRatio * max_pop / 2, label = EDR_star),\n    inherit.aes = FALSE, color = \"red\", size = 5, vjust = -0.8\n  ) +\n\n  # Median lines\n  geom_hline(yintercept = median_edr * max_pop / 2,\n             color = \"black\", linetype = \"solid\", size = 0.5) +\n  geom_hline(yintercept = median_ydr * max_pop / 2,\n             color = \"black\", linetype = \"solid\", size = 0.5) +\n\n  # Median line labels (right)\n  annotate(\"text\", x = last_x, y = median_edr * max_pop / 2,\n           label = \"Median EDR\", vjust = -1, hjust = 1, size = 3, color = \"black\") +\n  annotate(\"text\", x = last_x, y = median_ydr * max_pop / 2,\n           label = \"Median YDR\", vjust = 1.5, hjust = 1, size = 3, color = \"black\") +\n\n  # ➕ EDR/YDR values in red box area\n  annotate(\"text\", x = last_x - 10, y = max_pop * 0.9,\n           label = paste0(\"Median EDR = \", round(median_edr, 2)),\n           hjust = 0, size = 2, color = \"#9932CC\") +\n  annotate(\"text\", x = last_x - 10, y = max_pop * 0.8,\n           label = paste0(\"Median YDR = \", round(median_ydr, 2)),\n           hjust = 0, size = 2, color = \"#E67E22\") +\n\n  # Final touches\n  scale_fill_manual(values = custom_colors) +\n  scale_y_continuous(\n    name = \"Population Count\",\n    sec.axis = sec_axis(~ . * 2 / max_pop, name = \"Dependency Ratio\"),\n    labels = label_number(scale_cut = cut_short_scale())\n  ) +\n  labs(\n    title = \"Population by Planning Area with Youth & Elderly Dependency Ratios\",\n    subtitle = \"* indicates Planning Areas with Elderly Dependency Ratio above the national median\",\n    x = \"Planning Area\",\n    fill = \"Age Group\"\n  ) + \n  \n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\"\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#getting-start",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#getting-start",
    "title": "Take-home_Ex01_Phase2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggiraph, plotly, \n                DT, readxl, gifski, gapminder,\n               gganimate, scales) \n\n\n\n\n\npop_data  &lt;- read.csv(\"data/respopagesex2024.csv\")\n\nsgresidence  &lt;- read.csv(\"data/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#good-design-principles",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#good-design-principles",
    "title": "Take-home_Ex01_Phase2",
    "section": "",
    "text": "Here are the areas across all three visuals where she did very well and I should learn from:\n\nHer insights into the data were very profound, and she did a great job transforming the data to uncover more observations. For example, she derived the Youth Dependency Ratio (YDR) and the Elderly Dependency Ratio (EDR) to provide deeper insights into the issue of population aging. In comparison, my own assignment, which only compared population distributions, was not as insightful.\nShe used colors very skillfully in her visualization—not just to make her work more visually appealing, but more importantly, to highlight contrasts between different groups. For example, she used red and blue to distinguish between male and female groups, and orange and purple to differentiate between younger and older age groups. These thoughtful color choices made her entire visualization much clearer and easier to understand.\nHer choice of visualization types was highly appropriate—for instance, using bar charts to represent population distribution and a scatter quadrant map to show the distribution of YDR and EDR across subzones. Personally, I couldn’t think of a better choice of charts to convey the data more effectively."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#further-improvement",
    "href": "Take-home_Ex/Take-home_Ex01/Phase_2/Take-home_Ex01_Phase2.html#further-improvement",
    "title": "Take-home_Ex01_Phase2",
    "section": "",
    "text": "Following are my own ideas to adjust the visuals:\n\nIn her Visualization 1, the Population Pyramid, she presented a comprehensive view of the population structure of Singapore residents in 2024, broken down by gender and age group. However, from a reader’s perspective, the visualization contains too much information in a single chart, which may require extra effort to understand the relationships among population size, gender, age group, and percentage of the total population. In another word, the visual is not very straightforward. If it were up to me, I would present these pieces of information separately for greater clarity.\n\nFor the code, I’d like to simply “borrow” the approach used by our friend Luo Yuming, who streamlined the amount of information in the chart and represented the gender ratio comparison using an additional pie chart.\n\n# Standardise column names\npop_data &lt;- pop_data %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Age = Age,\n    Sex = Sex,\n    Population = Pop,\n    Year = Time\n  ) %&gt;%\n  filter(Year == 2024) %&gt;%\n  mutate(\n    Age_numeric = ifelse(Age == \"90_and_Over\", 90, as.integer(Age)),  \n    Sex = ifelse(Sex == \"Males\", \"Male\", \"Female\")\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Age_numeric = ifelse(Age == \"90_and_Over\", 90,\n  as.integer(Age))`.\nCaused by warning in `ifelse()`:\n! NAs introduced by coercion\n\nage_distribution &lt;- pop_data %&gt;%\n  filter(Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  group_by(Planning_Area, Age_numeric) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  rename(Age = Age_numeric)\n\n\nweighted_median &lt;- function(df) {\n  df &lt;- df[order(df$Age), ]\n  cum_pop &lt;- cumsum(df$Population)\n  cutoff &lt;- sum(df$Population) / 2\n  df$Age[which(cum_pop &gt;= cutoff)[1]]\n}\n\n\nmedian_age_summary &lt;- age_distribution %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Median_Age = weighted_median(cur_data_all()))\n\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `Median_Age = weighted_median(cur_data_all())`.\nℹ In group 1: `Planning_Area = \"Ang Mo Kio\"`.\nCaused by warning:\n! `cur_data_all()` was deprecated in dplyr 1.1.0.\nℹ Please use `pick()` instead.\n\ngender_summary &lt;- pop_data %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Percent = Population / sum(Population),\n         Label = paste0(percent(Percent, accuracy = 0.1)))  \n\n\np1 &lt;- ggplot(gender_summary, aes(x = \"\", y = Population, fill = Sex)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  geom_text(aes(label = Label), position = position_stack(vjust = 0.5),\n            size = 2.5, fontface = \"bold\", color = \"black\") + \n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(title = \"Gender Distribution\") +\n  theme_void() +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),  \n    legend.position = \"none\",\n    plot.title = element_text(size = 9, face = \"bold\", hjust = 0.5)\n  )\n\n\n\npyramid_data &lt;- pop_data %&gt;%\n  filter(Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  mutate(AgeGroup = cut(Age_numeric,\n                        breaks = c(seq(0, 90, 10), Inf),\n                        right = FALSE,\n                        labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\",\n                                   \"40-49\", \"50-59\", \"60-69\", \"70-79\",\n                                   \"80-89\", \"90+\"))) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Population = ifelse(Sex == \"Male\", -Population, Population))\n\n\n\np2 &lt;- ggplot(pyramid_data, aes(x = Population, y = AgeGroup, fill = Sex)) +\n  geom_col(width = 0.9) +\n  scale_x_continuous(labels = function(x) paste0(abs(x / 1000), \"k\")) +\n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(\n    title = \"Population Pyramid by Age Group and Gender (2024)\",\n    x = \"Population\",\n    y = \"Age Group\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    legend.position = \"none\"\n  )\n\n\ntop10_pa_names &lt;- pop_data %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Total = sum(Population), .groups = \"drop\") %&gt;%\n  arrange(desc(Total)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(Planning_Area)\n\n\ntop10_pyramid &lt;- pop_data %&gt;%\n  filter(Planning_Area %in% top10_pa_names, Sex %in% c(\"Male\", \"Female\")) %&gt;%\n  group_by(Planning_Area, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Male\", -Population, Population),\n    Planning_Area = factor(Planning_Area, levels = rev(top10_pa_names))\n  )\n\n\n\np3 &lt;-ggplot(top10_pyramid, aes(x = Population, y = Planning_Area, fill = Sex)) +\n  geom_col(width = 0.7) +\n  scale_x_continuous(labels = function(x) paste0(abs(x / 1000), name = \"k\")) +\n  scale_fill_manual(values = c(\"Male\" = \"#a3c3cc\", \"Female\" = \"#d4a5a5\")) +\n  labs(\n    title = \"Population Pyramid of Top 10 Planning Areas (2024)\",\n    y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    axis.text = element_text(size = 10),\n    legend.position = \"bottom\"\n  )\n\n\n(p1 + p2) / p3 +\n  plot_layout(\n    widths = c(1, 2),    \n    heights = c(1, 1.2)  \n  ) +\n  plot_annotation(\n    title = \"Singapore’s 2024 Population Overview\",\n    theme = theme(\n      plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)\n    )\n  )\n\n\n\n\n\n\n\n\n\nFor visualization 2, I’d like to make a very simple adjustment which can directly hit the point, which is add a label to each zone on the chart. If required, we may also make this to an interactive chart.\n\nMy shot:\n\nsgresidence &lt;- sgresidence %&gt;%\n  mutate(age = as.integer(Age))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `age = as.integer(Age)`.\nCaused by warning:\n! NAs introduced by coercion\n\nsgresidence %&gt;%\n  filter(is.na(as.integer(Age))) %&gt;%\n  distinct(Age)\n\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `is.na(as.integer(Age))`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n          Age\n1 90_and_Over\n\nsgresidence %&gt;%\n  filter(Age == \"90_and_Over\") %&gt;%\n  summarise(total_90plus = sum(Pop)) %&gt;%\n  mutate(total_pop = sum(sgresidence$Pop),\n         percent = total_90plus / total_pop * 100)\n\n  total_90plus total_pop   percent\n1        25290   4193530 0.6030719\n\nsgresidence &lt;- sgresidence %&gt;%\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    age = as.integer(Age)\n  )\n\nsgresidence &lt;- sgresidence %&gt;%\n  filter(Pop &gt; 0)\n\n## 1 ────────── Calculate ratios\ndep_sz &lt;- sgresidence %&gt;% \n  mutate(group = case_when(\n    age &lt; 15  ~ \"Youth\",\n    age &gt;= 65 ~ \"Elderly\",\n    TRUE      ~ \"Working\")) %&gt;% \n  group_by(SZ, group) %&gt;% \n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;% \n  pivot_wider(names_from = group, values_from = Pop, values_fill = 0) %&gt;% \n  mutate(\n    YDR        = Youth / Working,\n    EDR        = Elderly / Working,\n    Dependants = Youth + Elderly,\n    grp        = if_else(YDR &gt; EDR, \"Y_dom\", \"O_dom\"),\n    log_ratio  = log(pmax(EDR, 1e-6) / pmax(YDR, 1e-6)),  # avoid log(0)\n    YDR_pct    = percent_rank(YDR) * 100,\n    EDR_pct    = percent_rank(EDR) * 100\n  )\n\n## 2 ────────── Discretize log_ratio into \"Low\" / \"Mid\" / \"High\"\ndep_plot &lt;- dep_sz %&gt;%\n  mutate(\n    imbalance = cut(abs(log_ratio),\n                    breaks = quantile(abs(log_ratio), probs = c(0, 1/3, 2/3, 1)),\n                    labels = c(\"Low\", \"Mid\", \"High\"),\n                    include.lowest = TRUE))\n\n## 3 ────────── Define stepped color table\ncol_tbl &lt;- tribble(\n  ~grp,     ~imbalance, ~col,\n  \"Y_dom\", \"Low\",  \"#FFF2B2\",\n  \"Y_dom\", \"Mid\",  \"#FFC94A\",\n  \"Y_dom\", \"High\", \"#FF9300\",\n  \"O_dom\", \"Low\",  \"#E3DFF5\",\n  \"O_dom\", \"Mid\",  \"#AF94E1\",\n  \"O_dom\", \"High\", \"#6B42BF\"\n)\n\n## 4 ────────── Merge color\ndep_plot &lt;- dep_plot %&gt;%\n  left_join(col_tbl, by = c(\"grp\", \"imbalance\"))\n\n## 5 ────────── Plot\nggplot(dep_plot, aes(YDR_pct, EDR_pct)) +\n  geom_hline(yintercept = 50, color = \"gray60\") +\n  geom_vline(xintercept = 50, color = \"gray60\") +\n  geom_point(aes(size = Dependants, color = col), alpha = 0.9) +\n  scale_colour_identity() +\n  scale_size_area(max_size = 12,\n                  breaks = c(500, 2000, 5000, 10000),\n                  labels = scales::comma,\n                  name = \"Dependants\\n(headcount)\") +\n  labs(\n    title = \"Youth vs Elderly Dependency Ratio of SG Sub Zones Quadrants (2024)\",\n    subtitle = \"• Hue: Dominant dependency (Purple–Elderly, Yellow–Youth) \\n• Depth: Imbalance level (Low / Mid / High) \\n• Size: Total dependants count\",\n    x = \"Youth Dependency Percentile (YDP)\",\n    y = \"Elderly Dependency Percentile (EDP)\"\n  ) +\n \n  annotate(\"text\", x = 80, y = 90, label = \"Dual-Burden Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 80, y = 10, label = \"Young Family Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 20, y = 90, label = \"Aging-Dominant Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  annotate(\"text\", x = 20, y = 10, label = \"Working Core Zones\", fontface = \"bold\", size = 3.5, hjust = 0.5) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\n\n\n\n\nFor Visualization 3, I noticed that a): Median lines for both the EDR and YDR are presented, they are not labeled, which may cause confusion. I would recommend adding clear labels to these reference lines. b): It would be helpful to highlight planning areas where EDR exceed the median values, as these zones may warrant closer attention. c): It’s good to show the median EDR and YDR in value so that readers can understand the situation more clearly.\n\nMy shot:\n\n# 1. Categorize by Age Group and summarize population\ndf_agegroup &lt;- sgresidence %&gt;%\n  mutate(AgeGroup = case_when(\n    Age &lt; 15 ~ \"Youth\",\n    Age &lt;= 64 ~ \"WorkingAge\",\n    TRUE ~ \"Elderly\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(\n    TotalPop = Youth + WorkingAge + Elderly,\n    ElderlyRatio = Elderly / WorkingAge,\n    YouthRatio = Youth / WorkingAge\n  )\n\n# 2. Reshape to long format for stacked bar chart\ndf_age_long &lt;- df_agegroup %&gt;%\n  pivot_longer(cols = c(\"Youth\", \"WorkingAge\", \"Elderly\"),\n               names_to = \"AgeGroup\", values_to = \"Pop\") %&gt;%\n  mutate(PA = fct_reorder(PA, -Pop, .fun = sum))\n\n# 3. Compute median values and max population\nmedian_edr &lt;- median(df_agegroup$ElderlyRatio, na.rm = TRUE)\nmedian_ydr &lt;- median(df_agegroup$YouthRatio, na.rm = TRUE)\nmax_pop    &lt;- max(df_agegroup$TotalPop, na.rm = TRUE)\n\n# 4. Add star marker to EDR above median\ndf_agegroup &lt;- df_agegroup %&gt;%\n  mutate(EDR_star = if_else(ElderlyRatio &gt; median_edr, \"*\", \"\"))\n\n# 5. Define color palette\ncustom_colors &lt;- c(\n  \"Youth\" = \"#FFD700\",        # Gold\n  \"WorkingAge\" = \"#B0B0B0\",   # Gray\n  \"Elderly\" = \"#800080\"       # Purple\n)\n\n# 6. Get rightmost x position\nlast_x &lt;- length(unique(df_age_long$PA))\n\n# 7. Create the plot\nggplot(df_age_long, aes(x = PA, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", width = 0.95) +\n\n  # Elderly Dependency Ratio line\n  geom_line(\n    data = df_agegroup,\n    aes(x = PA, y = ElderlyRatio * max_pop / 2, group = 1),\n    inherit.aes = FALSE, color = \"#9932CC\", size = 1.2\n  ) +\n\n  # Youth Dependency Ratio line\n  geom_line(\n    data = df_agegroup,\n    aes(x = PA, y = YouthRatio * max_pop / 2, group = 1),\n    inherit.aes = FALSE, color = \"#E67E22\", size = 1.2\n  ) +\n\n  # Red stars for high EDR\n  geom_text(\n    data = df_agegroup %&gt;% filter(EDR_star == \"*\"),\n    aes(x = PA, y = ElderlyRatio * max_pop / 2, label = EDR_star),\n    inherit.aes = FALSE, color = \"red\", size = 5, vjust = -0.8\n  ) +\n\n  # Median lines\n  geom_hline(yintercept = median_edr * max_pop / 2,\n             color = \"black\", linetype = \"solid\", size = 0.5) +\n  geom_hline(yintercept = median_ydr * max_pop / 2,\n             color = \"black\", linetype = \"solid\", size = 0.5) +\n\n  # Median line labels (right)\n  annotate(\"text\", x = last_x, y = median_edr * max_pop / 2,\n           label = \"Median EDR\", vjust = -1, hjust = 1, size = 3, color = \"black\") +\n  annotate(\"text\", x = last_x, y = median_ydr * max_pop / 2,\n           label = \"Median YDR\", vjust = 1.5, hjust = 1, size = 3, color = \"black\") +\n\n  # ➕ EDR/YDR values in red box area\n  annotate(\"text\", x = last_x - 10, y = max_pop * 0.9,\n           label = paste0(\"Median EDR = \", round(median_edr, 2)),\n           hjust = 0, size = 2, color = \"#9932CC\") +\n  annotate(\"text\", x = last_x - 10, y = max_pop * 0.8,\n           label = paste0(\"Median YDR = \", round(median_ydr, 2)),\n           hjust = 0, size = 2, color = \"#E67E22\") +\n\n  # Final touches\n  scale_fill_manual(values = custom_colors) +\n  scale_y_continuous(\n    name = \"Population Count\",\n    sec.axis = sec_axis(~ . * 2 / max_pop, name = \"Dependency Ratio\"),\n    labels = label_number(scale_cut = cut_short_scale())\n  ) +\n  labs(\n    title = \"Population by Planning Area with Youth & Elderly Dependency Ratios\",\n    subtitle = \"* indicates Planning Areas with Elderly Dependency Ratio above the national median\",\n    x = \"Planning Area\",\n    fill = \"Age Group\"\n  ) + \n  \n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"right\"\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#getting-start",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#getting-start",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#introduction",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "1. Introduction",
    "text": "1. Introduction\nSailor Shift is one of the most influential figures in the development of “Oceans Folk” music. From her humble beginnings as a singer on Oceanus Island to her current status as a global superstar, she has grown to represent not only her own personal success, but has also propelled this niche genre into the world. This project uses data analysis and visualization to delve deeper into her network of collaborations, musical influences, and her importance in the overall music ecosystem. We will reveal how she has influenced others and been shaped by the zeitgeist, and further reflect on what her rise reveals about the new generation of musicians."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#data-processing",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#data-processing",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "2. Data processing",
    "text": "2. Data processing\n\n2.1. Extracting Edges and Nodes\n\nnodes_tbl &lt;- as_tibble(t_data$nodes)\nedges_tbl &lt;- as_tibble(t_data$links) \n\n\n\n2.2. Get closer to data\n\n2.2.1. Edges\n\n\nglimpse(edges_tbl)\n\nRows: 37,857\nColumns: 4\n$ `Edge Type` &lt;chr&gt; \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      &lt;int&gt; 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nlength(unique(edges_tbl$`Edge Type`))\n\n[1] 12\n\nunique(edges_tbl$`Edge Type`)\n\n [1] \"InterpolatesFrom\"   \"RecordedBy\"         \"PerformerOf\"       \n [4] \"ComposerOf\"         \"ProducerOf\"         \"InStyleOf\"         \n [7] \"LyricalReferenceTo\" \"CoverOf\"            \"DistributedBy\"     \n[10] \"MemberOf\"           \"LyricistOf\"         \"DirectlySamples\"   \n\n\nThe edges dataset contains 37,857 records and 4 fields to represent the various relationships between entities in the network. Each edge contains the node IDs (source and target) of the starting and ending points, as well as 12 Edge Types describing the nature of the relationship, such as “PerformerOf”, ‘ComposerOf’ or “RecordedBy”. Meanwhile, the key field is used to distinguish between multiple connections between the same node pair.\n\n\n2.2.2. Nodes\n\n\nglimpse(nodes_tbl)\n\nRows: 17,412\nColumns: 10\n$ `Node Type`    &lt;chr&gt; \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           &lt;chr&gt; \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         &lt;lgl&gt; TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   &lt;chr&gt; \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          &lt;chr&gt; \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        &lt;lgl&gt; TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\nThe nodes dataset contains 17,412 entries, each representing an entity within the music network and categorized under the Node Type column as “Person”, “Song”, or “RecordLabel”. Each node includes relevant attributes based on its type—for example, songs have fields such as single, release_date, genre, and notable, while people may have stage_name and notoriety_date. The presence of missing values (NA) in many fields indicates that certain attributes are only applicable to specific node types.\n\n\n2.2.3. Initial EDA\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThis bar chart above shows the distribution of different edge types in the music relationship network. The most common type is PerformerOf, indicating that the data heavily captures who performed which work. Other frequent types include ComposerOf, LyricistOf, and ProducerOf, highlighting the importance of creative and production roles. In contrast, relationships like MemberOf and DirectlySamples are less common, suggesting these connections are either rarer or less documented.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThis bar chart displays the distribution of different node types in the music network dataset. The most common type is Person, with a count far exceeding other categories, indicating a strong focus on individual artists, producers, and contributors. Songs also appear in large numbers, highlighting the dataset’s emphasis on works being created or performed. Other types like Albums, RecordLabels, and MusicalGroups are present but in significantly smaller quantities."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#creating-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#creating-knowledge-graph",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "3. Creating Knowledge Graph",
    "text": "3. Creating Knowledge Graph\n\n3.1. Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n3.2. Map source and target IDs to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n3.3. Filter out any unmatched (invalid) edges\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n3.4. Creating tidygraph\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = t_data$directed)\n\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#visualising-the-knowledge-graph",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "4. Visualising the knowledge graph",
    "text": "4. Visualising the knowledge graph\n\nset.seed(1234)\n\n\n4.1. Visualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n4.2. Visualising the sub-graph\n\n4.2.1. Filtering edges to only “MemberOf”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n4.2.2. Extracting only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n4.2.3. Keeping only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n\n4.2.4. Plotting the sub-graph\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#sailor-shifts-career-connections",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02a.html#sailor-shifts-career-connections",
    "title": "Sailor Shift: Rise and Resonance",
    "section": "5. Sailor Shift’s Career Connections",
    "text": "5. Sailor Shift’s Career Connections\n\n5.1. The contributors who shaped the modern Sailor Shift\nA singer’s journey to fame is never a solitary one. Sailor has been accompanied by many — fellow singers, producers, instrumentalists, composers, and others who helped shape her path.\n\n# Sailor Shift's Index\nsailor_idx &lt;- which(nodes_tbl$name == \"Sailor Shift\")\n\n\n# Sailor Shift's works'Index\nperf_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Edge Type` == \"PerformerOf\", from == sailor_idx)\n\nsailor_works_idx &lt;- perf_edges %&gt;% pull(to) %&gt;% unique()\n\nfocus_idx1 &lt;- unique(c(sailor_idx, sailor_works_idx))\n\n\n# Keep Edges that 'influence' Sailor Shift's works\ninfluence_types1 &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\", \"CoverOf\")\n\ngraph_influence1 &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(\n    `Edge Type` %in% influence_types1,\n    to %in% focus_idx1\n  )\n\n\n# Extract Nodes \nused_node_indices1 &lt;- graph_influence1 %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n# Keep Nodes\ngraph_influence1 &lt;- graph_influence1 %&gt;%\n  activate(nodes) %&gt;%\n  mutate(.row = row_number()) %&gt;%\n  filter(.row %in% used_node_indices1) %&gt;%\n  select(-.row)\n\n\n# Plot\nggraph(graph_influence1, layout = \"fr\") +\n  geom_edge_link(aes(color = `Edge Type`),\n                 arrow    = arrow(length = unit(4, \"pt\"), type = \"closed\"),\n                 end_cap  = circle(3, \"pt\"),\n                 start_cap = circle(3, \"pt\"),\n                 width    = 0.5,\n                 alpha    = 0.6,\n                 show.legend = TRUE) +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 2) +\n  geom_node_text(aes(label = name),\n                 size         = 2.5,\n                 repel        = TRUE,\n                 max.overlaps = Inf) +\n  scale_edge_colour_brewer(palette = \"Set2\",\n                           name    = \"Edge Type\") +\n  scale_color_manual(values = c(\n    \"Person\"      = \"#377EB8\",\n    \"Album\"       = \"#E41A1C\",\n    \"RecordLabel\" = \"#4DAF4A\"\n    ), name = \"Node Type\") +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    legend.title    = element_text(size = 10),\n    legend.text     = element_text(size = 8),\n    plot.margin     = margin(5, 5, 5, 5)\n  )\n\n\n\n\n\n\n\n\nThis network diagram places Sailor Shift at its center and reveals the diverse teams behind each album. By mapping the ComposerOf, ProducerOf and LyricistOf relationships, it clearly shows which composers, producers, and record labels have shaped her work. From the visualization, it’s clear that Ewan MacRae has had the greatest influence on her discography: he not only composed Oceanbound alone but also teamed up with Freya Lindholm and Astrid Nørgaard to co-create Coral Beats, leaving a significant mark on two albums—far more than any other contributor.\n\n\n5.2. Who did Sailor Shift influenced\nThroughout Sailor’s career, not only has Sailor received influences from others, but her work has begun to inspire others, extending her creative reach beyond her immediate circle.\n\n# Sailor's works\nlayer1_targets &lt;- perf_edges %&gt;%\n  pull(to)\n\n\n# Works influenced by Silor's works\ninfluence_types2 &lt;- c(\"DirectlySamples\", \"InStyleOf\",\n                     \"LyricalReferenceTo\", \"InterpolatesFrom\")\n\nlayer2_targets &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Edge Type` %in% influence_types2,\n         from %in% layer1_targets) %&gt;%\n  pull(to)\n\n\n# Creators of those influenced works\ncreator_types &lt;- c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\n\n\ngraph_sub2 &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(\n    (`Edge Type` == \"PerformerOf\" & from == sailor_idx) |\n    (`Edge Type` %in% influence_types2 & from %in% layer1_targets) |\n    (`Edge Type` %in% creator_types & to %in% layer2_targets)\n  )\n\n\nused_nodes2 &lt;- graph_sub2 %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\ngraph_sub2 &lt;- graph_sub2 %&gt;%\n  activate(nodes) %&gt;%\n  mutate(.row = row_number()) %&gt;%\n  filter(.row %in% used_nodes2) %&gt;%\n  select(-.row)\n\n\n\nggraph(graph_sub2, layout = \"fr\") +\n  geom_edge_link(aes(color = `Edge Type`),\n                 arrow      = arrow(length = unit(3, \"pt\"), type = \"closed\"),\n                 end_cap    = circle(2.5, \"pt\"),\n                 start_cap  = circle(2.5, \"pt\"),\n                 width      = 0.6,\n                 alpha      = 0.7) +\n  geom_node_point(aes(color = `Node Type`), size = 3) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5, max.overlaps = Inf) +\n  scale_edge_colour_manual(values = c(\n    PerformerOf        = \"#8DD3C7\",\n    DirectlySamples    = \"#FB8072\",\n    InStyleOf          = \"#80B1D3\",\n    LyricalReferenceTo = \"#FDB462\",\n    InterpolatesFrom   = \"#B3DE69\",\n    ComposerOf         = \"#FCCDE5\",\n    ProducerOf         = \"#BEBADA\",\n    LyricistOf         = \"#FFED6F\"\n  ), name = \"Relation\") +\n  scale_color_manual(values = c(\n    Person       = \"#377EB8\",\n    Album        = \"#E41A1C\",\n    Song         = \"#4DAF4A\",\n    RecordLabel  = \"#984EA3\",\n    MusicalGroup = \"#FF7F00\"\n  ), name = \"Node Type\") +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    legend.title    = element_text(size = 10),\n    legend.text     = element_text(size = 8)\n  )\n\n\n\n\n\n\n\n\nThis visualization adopts a four-layer peeling approach: at the very center sits Sailor Shift (blue), surrounded by her own recordings and lyric-penned tracks (red and green). The third ring maps the songs that directly sample, stylistically echo, lyrically reference, or interpolate her work (green), and the outermost layer identifies the composers, producers, and lyricists (blue) behind those derivative pieces. By counting connection frequencies, Wei Zhao stands out as the most heavily influenced creator—appearing under two separate derivative tracks—making them the single individual most shaped by Sailor Shift’s musical legacy.\n\n\n5.3. Sailor Shift‘s influence to the Oceanus Folk community\n\n# Sailor's Index\nsailor_idx &lt;- which(nodes_tbl$name == \"Sailor Shift\")\n\n\n# Sailor's works\ncreative_edge_types &lt;- c(\"PerformerOf\")\n\nperf_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  filter(`Edge Type` %in% creative_edge_types, from == sailor_idx)\n\nsailor_works_idx &lt;- perf_edges %&gt;% pull(to) %&gt;% unique()\n\n\nnodes_tbl[sailor_works_idx, ]\n\n# A tibble: 26 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Album       Tidal Pop W… NA     2028         Ocea… TRUE    17272 2027        \n 2 Album       Salty Dreams NA     2030         Ocea… TRUE    17273 2029        \n 3 Album       The Current… NA     2032         Ocea… TRUE    17274 2031        \n 4 Album       Coral Beats  NA     2034         Ocea… TRUE    17275 2033        \n 5 Album       Tides & Bal… NA     2036         Ocea… TRUE    17276 2035        \n 6 Album       Oceanbound   NA     2038         Ocea… TRUE    17277 2037        \n 7 Album       Echoes of t… NA     2040         Ocea… TRUE    17278 2039        \n 8 Song        High Tide H… TRUE   2028         Ocea… FALSE   17279 &lt;NA&gt;        \n 9 Song        Electric Ee… FALSE  2028         Ocea… TRUE    17280 &lt;NA&gt;        \n10 Song        Sun-Drenche… FALSE  2028         Ocea… FALSE   17281 &lt;NA&gt;        \n# ℹ 16 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n# Oceanus Folk Community works\noceanus_works_idx &lt;- nodes_tbl %&gt;%\n  mutate(idx = row_number()) %&gt;%\n  filter(genre == \"Oceanus Folk\") %&gt;%\n  pull(idx)\n\n\n# Combine all nodes\nfocus_idx &lt;- unique(c(sailor_works_idx, oceanus_works_idx))\n\n\nnodes_tbl[focus_idx, ]\n\n# A tibble: 305 × 10\n   `Node Type` name         single release_date genre notable    id written_date\n   &lt;chr&gt;       &lt;chr&gt;        &lt;lgl&gt;  &lt;chr&gt;        &lt;chr&gt; &lt;lgl&gt;   &lt;int&gt; &lt;chr&gt;       \n 1 Album       Tidal Pop W… NA     2028         Ocea… TRUE    17272 2027        \n 2 Album       Salty Dreams NA     2030         Ocea… TRUE    17273 2029        \n 3 Album       The Current… NA     2032         Ocea… TRUE    17274 2031        \n 4 Album       Coral Beats  NA     2034         Ocea… TRUE    17275 2033        \n 5 Album       Tides & Bal… NA     2036         Ocea… TRUE    17276 2035        \n 6 Album       Oceanbound   NA     2038         Ocea… TRUE    17277 2037        \n 7 Album       Echoes of t… NA     2040         Ocea… TRUE    17278 2039        \n 8 Song        High Tide H… TRUE   2028         Ocea… FALSE   17279 &lt;NA&gt;        \n 9 Song        Electric Ee… FALSE  2028         Ocea… TRUE    17280 &lt;NA&gt;        \n10 Song        Sun-Drenche… FALSE  2028         Ocea… FALSE   17281 &lt;NA&gt;        \n# ℹ 295 more rows\n# ℹ 2 more variables: stage_name &lt;chr&gt;, notoriety_date &lt;chr&gt;\n\n\n\n# Influence Types\n\ninfluence_types3 &lt;- c(\n  \"DirectlySamples\",\n  \"InStyleOf\",\n  \"LyricalReferenceTo\",\n  \"InterpolatesFrom\",\n  \"CoverOf\"\n)\n\n\n# Filter Edges\ngraph_3 &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` %in% influence_types3 )\n\n\n# Extracting Nodes\n\n\nused_node_indices3 &lt;- graph_3 %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n# Keep Nodes\n\ngraph_3 &lt;- graph_3 %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% focus_idx) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n# Add label\ngraph_3 &lt;- graph_3 %&gt;%\n  activate(nodes) %&gt;%\n  mutate(is_sailor_work = ifelse(name %in% nodes_tbl$name[sailor_works_idx], \n                                 \"Sailor's Work\", \"Other\"))\n\n\n# Ploting\n\nggraph(graph_3, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, colour = \"gray\") +\n  geom_node_point(aes(color = is_sailor_work), size = 1.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nSailor Shift has influenced collaborators in the Oceanus Folk community primarily through indirect inspiration. Her works, though few in number, are embedded across different parts of the network, suggesting they have been referenced or sampled by multiple creators. While she doesn’t appear to collaborate repeatedly with specific individuals, her influence spans across stylistic clusters, indicating a broad and decentralized artistic impact"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-Visual Analytics and Application",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Application homepage. In this website, you will find my coursework prepared for this course!"
  }
]