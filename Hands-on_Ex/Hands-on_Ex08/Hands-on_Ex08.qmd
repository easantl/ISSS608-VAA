---
title: "Hands-on_Ex08"
format: html
author: "Linsen Lu"
execute: 
  eval: true
  echo: true
  warning: false
---

# Part 1

## **Getting Started**

```{R}
pacman::p_load(sf, tmap, tidyverse)
```

### **Importing Geospatial Data into R**

```{R}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

```{R}
mpsz
```

### **Importing Attribute Data into R**

```{R}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## **Data Preparation**

### Data wrangling

```{R}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### Joining the attribute data and geospatial data

```{R}
popdata2020 <- popdata2020 %>%
  mutate(across(c(PA, SZ), toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{R}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{R}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## **Choropleth Mapping Geospatial Data Using *tmap***

### **Plotting a choropleth map quickly by using *qtm()***

```{R}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### **Creating a choropleth map by using *tmap*â€™s elements**

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### Drawing a base map

```{R}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### Drawing a choropleth map using *tm_polygons()*

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

#### Drawing a choropleth map using *tm_fill()* and *tm_border()*

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY") +
  tm_borders(lwd = 0.01,  
             fill_alpha = 0.1)
```

### **Data classification methods of tmap**

#### Plotting choropleth maps with built-in classification methods

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "jenks",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "equal",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

#### DIY

```{R}
### Too many number of classes 
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "pretty",
        n = 10)) +
  tm_borders(fill_alpha = 0.5)

```

```{R}
### Using k-mean style
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "kmeans",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)

```

#### Plotting choropleth map with custome break

```{R}
summary(mpsz_pop2020$DEPENDENCY)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(fill_alpha = 0.5)
```

### **Colour Scheme**

#### Using ColourBrewer palette

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "quantile",
        n = 5,
        values = "brewer.greens")) +
  tm_borders(fill_alpha = 0.5)

```

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "quantile",
        n = 5,
        values = "-brewer.greens")) +
  tm_borders(fill_alpha = 0.5)
```

### **Map Layouts**

#### Map Legend

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "jenks",
        n = 5,
        values = "brewer.greens"),
      fill.legend = tm_legend(
        title = "Dependency ratio")) +
  tm_borders(fill_alpha = 0.5) +
  tm_title("Distribution of Dependency Ratio by planning subzone \n(Jenks classification)")
```

#### Map style

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### Cartographic Furniture

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{R}
tmap_style("white")
```

## **Drawing Small Multiple Choropleth Maps**

### By assigning multiple values to at least one of the aesthetic arguments

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{R}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### By defining a group-by variable in *tm_facets()*

```{R}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### By creating multiple stand-alone maps with `tmap_arrange()`

```{R}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### **Mappping Spatial Object Meeting a Selection Criterion**

```{R}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

# Part 2

## **Getting Started**

```{R}
pacman::p_load(sf, tmap, tidyverse)
```

## **Geospatial Data Wrangling**

### **Data Import and Preparation**

```{R}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

```{R}
list(sgpools) 
```

### **Creating a sf data frame from an aspatial data frame**

```{R}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs= 3414)
```

```{R}
list(sgpools_sf)
```

## **Drawing Proportional Symbol Map**

```{R}
tmap_mode("view")
```

### **It all started with an interactive point symbol map**

```{R}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
           size = 1,
           col = "black",
           lwd = 1)
```

### **Lets make it proportional**

```{R}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```

### **Lets give it a different colour**

```{R}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```

### **I have a twin brothers**

```{R}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1) + 
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```

```{R}
tmap_mode("plot")
```

# Part 3

## **Getting Started**

### **Installing and loading packages**

```{R}
pacman::p_load(tmap, tidyverse, sf)
```

### **Importing data**

```{R}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")
```

## **Basic Choropleth Mapping**

### **Visualising distribution of non-functional water point**

```{R}
p1 <- tm_shape(NGA_wp) +
  tm_polygons(fill = "wp_functional",
             fill.scale = tm_scale_intervals(
               style = "equal",
               n = 10,
               values = "brewer.blues"),
             fill.legend = tm_legend(
               position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Distribution of functional water point by LGAs")
```

```{R}
p2 <- tm_shape(NGA_wp) + 
  tm_polygons(fill = "total_wp", 
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1, 
             fill_alpha = 1) + 
  tm_title("Distribution of total  water point by LGAs")
```

```{R}
tmap_arrange(p2, p1, nrow = 1)
```

## **Choropleth Map for Rates**

### **Deriving Proportion of Functional Water Points and Non-Functional Water Points**

```{R}
NGA_wp <- NGA_wp %>%
  mutate(pct_functional = wp_functional/total_wp) %>%
  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)
```

### **Plotting map of rate**

```{R}
tm_shape(NGA_wp) +
  tm_polygons("pct_functional",
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Rate map of functional water point by LGAs")
```

## **Extreme Value Maps**

### Data Preparation

```{R}
# Step 1: Exclude records with NA
NGA_wp <- NGA_wp %>%
  drop_na()
```

```{R}
# Creating customised classification and extracting values

percent <- c(0,.01,.1,.5,.9,.99,1)
var <- NGA_wp["pct_functional"] %>%
  st_set_geometry(NULL)
quantile(var[,1], percent)
```

### Writing function

#### Creating the get.var function

```{R}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

#### A percentile mapping function

```{R}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_polygons(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

#### Test drive the percentile mapping function

```{R}
percentmap("total_wp", NGA_wp)
```

### **Box map**

```{R}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```

#### Creating the boxbreaks function

```{R}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

#### Creating the get.var function

```{R}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

#### Test drive the newly created function

```{R}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

#### Boxmap function

```{R}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```

```{R}
tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```
